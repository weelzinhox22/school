import { useState } from "react";
import { motion } from "framer-motion";
import { Users, Calendar, MessageCircle, FileText, AlertTriangle, BookOpen, CheckCircle2, XCircle, Eye } from "lucide-react";
import { Button } from "@/components/ui/button";
import { toast } from "react-hot-toast";
import PerfilProfessor from "./PerfilProfessor";

// Interface para as props do componente
interface ProfessoresProps {
  mockProfessores: {
    id: number;
    nome: string;
    disciplina: string;
    turmas: string[];
    email: string;
    status: string;
  }[];
  mockEventosAcademicos: {
    id: number;
    titulo: string;
    data: string;
    tipo: string;
  }[];
  professorSelecionado: null | {
    id: number;
    nome: string;
    disciplina?: string;
    turmas?: string[];
    email?: string;
    status?: string;
    horarios?: Record<string, any>;
  };
  setProfessorSelecionado: (prof: null | any) => void;
  cardVariants: any;
}

// Componente de Professores do Dashboard
export default function Professores({ 
  mockProfessores, 
  mockEventosAcademicos, 
  professorSelecionado, 
  setProfessorSelecionado,
  cardVariants 
}: ProfessoresProps) {
  // Estado para controlar qual professor está tendo o perfil visualizado
  const [perfilAberto, setPerfilAberto] = useState<null | typeof mockProfessores[0]>(null);
  
  // Estado para controlar qual visualização de pendência está aberta
  const [visualizacaoPendencia, setVisualizacaoPendencia] = useState<string | null>(null);

  // Função para abrir o perfil do professor
  const abrirPerfil = (professor: typeof mockProfessores[0]) => {
    setPerfilAberto(professor);
  };

  // Função para lidar com cliques em botões de pendência
  const handlePendenciaClick = (tipo: string) => {
    setVisualizacaoPendencia(tipo);
    toast.success(`Visualizando: ${tipo}`);
  };

  return (
    <motion.div
      key="professores"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: 20 }}
      transition={{ duration: 0.3 }}
    >
      {/* Cabeçalho da seção com ações */}
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-xl font-bold text-indigo-700 flex items-center gap-3">
          <Users className="w-6 h-6" />
          Equipe de Professores
        </h2>
        <div className="flex gap-2">
          <Button 
            variant="outline" 
            className="flex gap-2 bg-white hover:bg-indigo-50" 
            onClick={() => setProfessorSelecionado({ nome: '', horarios: {}, id: 0 })}
          >
            <Calendar className="w-5 h-5" /> Ver Horários
          </Button>
          <Button className="flex gap-2" onClick={() => toast.success("Enviar e-mail para todos os professores")}>
            <MessageCircle className="w-5 h-5" /> Mensagem para Todos
          </Button>
        </div>
      </div>
      
      {/* Modal de Horários dos Professores - Mantido idêntico para preservar funcionalidade */}
      {professorSelecionado !== null && (
        <motion.div 
          key="modal-horario" 
          initial={{ opacity: 0 }} 
          animate={{ opacity: 1 }} 
          exit={{ opacity: 0 }}
          className="fixed inset-0 bg-black/30 flex items-center justify-center z-50"
        >
          <motion.div 
            initial={{ scale: 0.95, y: 30 }} 
            animate={{ scale: 1, y: 0 }} 
            exit={{ scale: 0.95, y: 30 }} 
            transition={{ type: "spring", stiffness: 120 }} 
            className="bg-white rounded-xl shadow-xl p-8 w-full max-w-4xl max-h-[90vh] overflow-auto"
          >
            <div className="flex justify-between items-center mb-6">
              <h3 className="text-xl font-bold text-indigo-700 flex items-center gap-2">
                <Calendar className="w-6 h-6" /> 
                {professorSelecionado.id ? `Horários de ${professorSelecionado.nome}` : 'Horários dos Professores'}
              </h3>
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={() => setProfessorSelecionado(null)}
                className="rounded-full h-8 w-8 p-0"
              >
                <XCircle className="h-5 w-5" />
              </Button>
            </div>

            {professorSelecionado.id ? (
              // Visualização de um professor específico
              <div className="space-y-6">
                <div className="flex items-center gap-4 mb-4">
                  <div className="bg-indigo-100 p-3 rounded-full">
                    <Users className="w-6 h-6 text-indigo-600" />
                  </div>
                  <div>
                    <h4 className="text-lg font-medium">{professorSelecionado.nome}</h4>
                    <p className="text-gray-500">{professorSelecionado.disciplina || 'Professor'}</p>
                  </div>
                </div>
                
                <div className="bg-white rounded-xl shadow-md overflow-hidden mb-4">
                  <h5 className="font-semibold text-indigo-800 px-4 py-3 bg-gradient-to-r from-indigo-50 to-white border-b">Disponibilidade Semanal</h5>
                  <div className="overflow-x-auto">
                    <table className="w-full border-collapse">
                      <thead>
                        <tr>
                          <th className="px-4 py-3 bg-indigo-50 text-indigo-800 text-left font-medium border-b border-indigo-100"></th>
                          <th className="px-4 py-3 bg-indigo-50 text-indigo-800 text-center font-medium border-b border-indigo-100">Segunda</th>
                          <th className="px-4 py-3 bg-indigo-50 text-indigo-800 text-center font-medium border-b border-indigo-100">Terça</th>
                          <th className="px-4 py-3 bg-indigo-50 text-indigo-800 text-center font-medium border-b border-indigo-100">Quarta</th>
                          <th className="px-4 py-3 bg-indigo-50 text-indigo-800 text-center font-medium border-b border-indigo-100">Quinta</th>
                          <th className="px-4 py-3 bg-indigo-50 text-indigo-800 text-center font-medium border-b border-indigo-100">Sexta</th>
                        </tr>
                      </thead>
                      <tbody>
                        {['Manhã (7h-12h)', 'Tarde (13h-18h)', 'Noite (19h-22h)'].map((periodo, i) => (
                          <tr key={i} className={i % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                            <td className="px-4 py-3 font-medium text-gray-700 border-r border-indigo-100">{periodo}</td>
                            {['seg', 'ter', 'qua', 'qui', 'sex'].map((dia, j) => {
                              // Simulando dados de disponibilidade
                              const disponivel = Math.random() > 0.3;
                              const aula = disponivel && Math.random() > 0.4;
                              return (
                                <td 
                                  key={j} 
                                  className="py-3 text-center relative"
                                >
                                  <div className={`mx-2 rounded-lg py-2 px-1 ${
                                    !disponivel ? 'bg-red-50 border border-red-100' : 
                                    aula ? 'bg-green-50 border border-green-100' : 
                                    'bg-blue-50 border border-blue-100'
                                  }`}>
                                    {!disponivel ? (
                                      <div className="flex flex-col items-center">
                                        <div className="w-7 h-7 rounded-full bg-red-100 flex items-center justify-center mb-1">
                                          <XCircle className="w-5 h-5 text-red-500" />
                                        </div>
                                        <span className="text-xs font-medium text-red-700">Indisponível</span>
                                      </div>
                                    ) : aula ? (
                                      <div className="flex flex-col items-center">
                                        <div className="w-7 h-7 rounded-full bg-green-100 flex items-center justify-center mb-1">
                                          <BookOpen className="w-5 h-5 text-green-600" />
                                        </div>
                                        <span className="text-xs font-medium text-green-700">
                                          Turma {['1A', '2B', '3A'][Math.floor(Math.random() * 3)]}
                                        </span>
                                      </div>
                                    ) : (
                                      <div className="flex flex-col items-center">
                                        <div className="w-7 h-7 rounded-full bg-blue-100 flex items-center justify-center mb-1">
                                          <CheckCircle2 className="w-5 h-5 text-blue-600" />
                                        </div>
                                        <span className="text-xs font-medium text-blue-700">Disponível</span>
                                      </div>
                                    )}
                                  </div>
                                </td>
                              );
                            })}
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="border rounded-lg p-4 bg-gray-50 hover:bg-gray-100 transition-colors">
                    <h5 className="font-medium text-gray-700 mb-2">Restrições de Horário</h5>
                    <ul className="space-y-2 text-sm">
                      <li className="flex items-start gap-2">
                        <XCircle className="w-4 h-4 text-red-500 mt-0.5 flex-shrink-0" />
                        <span>Segunda-feira - Indisponível no período da manhã (Compromisso pessoal)</span>
                      </li>
                      <li className="flex items-start gap-2">
                        <XCircle className="w-4 h-4 text-red-500 mt-0.5 flex-shrink-0" />
                        <span>Quarta-feira - Indisponível após as 16h (Pós-graduação)</span>
                      </li>
                    </ul>
                  </div>
                  
                  <div className="border rounded-lg p-4 bg-gray-50 hover:bg-gray-100 transition-colors">
                    <h5 className="font-medium text-gray-700 mb-2">Preferências</h5>
                    <ul className="space-y-2 text-sm">
                      <li className="flex items-start gap-2">
                        <CheckCircle2 className="w-4 h-4 text-green-500 mt-0.5 flex-shrink-0" />
                        <span>Prefere lecionar no período da manhã</span>
                      </li>
                      <li className="flex items-start gap-2">
                        <CheckCircle2 className="w-4 h-4 text-green-500 mt-0.5 flex-shrink-0" />
                        <span>Disponível para aulas extras às sextas-feiras</span>
                      </li>
                    </ul>
                  </div>
                </div>
                
                <div className="flex gap-3 mt-4">
                  <Button onClick={() => toast.success(`Horário de ${professorSelecionado.nome} atualizado`)}>
                    Editar Horários
                  </Button>
                  <Button 
                    variant="outline" 
                    onClick={() => toast.success(`E-mail enviado para ${professorSelecionado.nome}`)}
                  >
                    Enviar Mensagem
                  </Button>
                </div>
              </div>
            ) : (
              // Visualização de todos os professores
              <div>
                <div className="flex justify-between items-center mb-4">
                  <h4 className="font-semibold text-gray-800">Disponibilidade Geral - Semana Atual</h4>
                  <div className="flex gap-3 items-center text-sm">
                    <div className="flex items-center gap-1">
                      <div className="w-3 h-3 rounded-full bg-green-100 border border-green-200"></div>
                      <span>Disponível</span>
                    </div>
                    <div className="flex items-center gap-1">
                      <div className="w-3 h-3 rounded-full bg-red-100 border border-red-200"></div>
                      <span>Indisponível</span>
                    </div>
                    <div className="flex items-center gap-1">
                      <div className="w-3 h-3 rounded-full bg-blue-100 border border-blue-200"></div>
                      <span>Em aula</span>
                    </div>
                  </div>
                </div>
                
                <div className="overflow-hidden rounded-xl shadow-lg bg-white">
                  <table className="w-full border-collapse">
                    <thead>
                      <tr>
                        <th className="px-4 py-3 bg-indigo-50 text-indigo-800 text-left font-medium border-b border-indigo-100">Professor</th>
                        <th className="px-4 py-3 bg-indigo-50 text-indigo-800 text-center font-medium border-b border-indigo-100">Segunda</th>
                        <th className="px-4 py-3 bg-indigo-50 text-indigo-800 text-center font-medium border-b border-indigo-100">Terça</th>
                        <th className="px-4 py-3 bg-indigo-50 text-indigo-800 text-center font-medium border-b border-indigo-100">Quarta</th>
                        <th className="px-4 py-3 bg-indigo-50 text-indigo-800 text-center font-medium border-b border-indigo-100">Quinta</th>
                        <th className="px-4 py-3 bg-indigo-50 text-indigo-800 text-center font-medium border-b border-indigo-100">Sexta</th>
                        <th className="px-4 py-3 bg-indigo-50 text-indigo-800 text-center font-medium border-b border-indigo-100">Ações</th>
                      </tr>
                    </thead>
                    <tbody>
                      {mockProfessores.map((prof, idx) => (
                        <tr key={prof.id} className={idx % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                          <td className="py-3 px-4">
                            <div className="flex items-center gap-3">
                              <div className="w-10 h-10 rounded-full bg-indigo-100 text-indigo-700 flex items-center justify-center font-bold text-xl">
                                {prof.nome.charAt(0)}
                              </div>
                              <div>
                                <div 
                                  className="font-medium text-gray-900 hover:text-indigo-700 cursor-pointer transition-colors hover:underline"
                                  onClick={() => abrirPerfil(prof)}
                                >
                                  {prof.nome}
                                </div>
                                <div className="text-xs text-gray-500">{prof.email}</div>
                              </div>
                            </div>
                          </td>
                          {['seg', 'ter', 'qua', 'qui', 'sex'].map((dia, i) => {
                            // Simulando dados de disponibilidade semanal
                            const disponibilidade = ['disponível', 'indisponível', 'aula'][Math.floor(Math.random() * 3)];
                            return (
                              <td 
                                key={i} 
                                className="py-3 text-center"
                              >
                                <div className={`mx-2 rounded-lg py-1.5 ${
                                  disponibilidade === 'disponível' ? 'bg-green-50 border border-green-100' : 
                                  disponibilidade === 'indisponível' ? 'bg-red-50 border border-red-100' : 
                                  'bg-blue-50 border border-blue-100'
                                }`}>
                                  <div className="flex items-center justify-center gap-1.5">
                                    <div className={`w-2.5 h-2.5 rounded-full ${
                                      disponibilidade === 'disponível' ? 'bg-green-400' : 
                                      disponibilidade === 'indisponível' ? 'bg-red-400' : 
                                      'bg-blue-400'
                                    }`}></div>
                                    <span className={`text-xs font-medium ${
                                      disponibilidade === 'disponível' ? 'text-green-700' : 
                                      disponibilidade === 'indisponível' ? 'text-red-700' : 
                                      'text-blue-700'
                                    }`}>
                                      {disponibilidade === 'disponível' ? 'Disponível' : 
                                       disponibilidade === 'indisponível' ? 'Indisponível' : 
                                       'Em aula'}
                                    </span>
                                  </div>
                                </div>
                              </td>
                            );
                          })}
                          <td className="px-4 py-3 text-center">
                            <Button 
                              size="sm" 
                              variant="ghost" 
                              onClick={() => setProfessorSelecionado(prof)}
                              className="text-indigo-600 hover:text-indigo-800 hover:bg-indigo-50 rounded-lg"
                            >
                              <Eye className="w-4 h-4 mr-1" />
                              Detalhes
                            </Button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
                
                <div className="mt-6 flex justify-between items-center">
                  <Button 
                    variant="outline"
                    className="flex items-center gap-2"
                    onClick={() => toast.success("Planilha de horários exportada")}
                  >
                    <FileText className="w-4 h-4" /> Exportar Planilha
                  </Button>
                  
                  <Button 
                    className="flex items-center gap-2"
                    onClick={() => toast.success("Enviando solicitação de atualização de disponibilidade para todos os professores")}
                  >
                    <MessageCircle className="w-4 h-4" /> Solicitar Atualização
                  </Button>
                </div>
              </div>
            )}
          </motion.div>
        </motion.div>
      )}
      
      {/* Lista de professores com visual melhorado */}
      <div className="bg-white rounded-xl shadow-lg p-6 mb-6 hover:shadow-xl transition-shadow">
        <div className="overflow-x-auto">
          <table className="w-full text-left border-collapse">
            <thead>
              <tr className="border-b border-indigo-100">
                <th className="py-3 px-4 text-indigo-700 font-semibold">Professor</th>
                <th className="py-3 px-4 text-indigo-700 font-semibold">Disciplina</th>
                <th className="py-3 px-4 text-indigo-700 font-semibold">Turmas</th>
                <th className="py-3 px-4 text-indigo-700 font-semibold">Status</th>
                <th className="py-3 px-4 text-indigo-700 font-semibold text-center">Ações</th>
              </tr>
            </thead>
            <tbody>
              {mockProfessores.map(prof => (
                <tr key={prof.id} className="border-b last:border-b-0 hover:bg-indigo-50 transition-colors">
                  <td className="py-3 px-4">
                    <div className="flex items-center gap-3">
                      <div className="w-10 h-10 rounded-full bg-indigo-100 text-indigo-700 flex items-center justify-center font-bold text-xl">
                        {prof.nome.charAt(0)}
                      </div>
                      <div>
                        <div 
                          className="font-medium text-gray-900 hover:text-indigo-700 cursor-pointer transition-colors hover:underline"
                          onClick={() => abrirPerfil(prof)}
                        >
                          {prof.nome}
                        </div>
                        <div className="text-xs text-gray-500">{prof.email}</div>
                      </div>
                    </div>
                  </td>
                  <td className="py-3 px-4">{prof.disciplina}</td>
                  <td className="py-3 px-4">
                    <div className="flex flex-wrap gap-1">
                      {prof.turmas.map(turma => (
                        <span key={turma} className="px-2 py-1 bg-indigo-50 text-indigo-700 rounded-full text-xs">
                          {turma}
                        </span>
                      ))}
                    </div>
                  </td>
                  <td className="py-3 px-4">
                    <span className={`px-3 py-1 rounded-full text-xs font-medium ${
                      prof.status === 'Ativo' ? 'bg-green-100 text-green-700' : 'bg-amber-100 text-amber-700'
                    }`}>
                      {prof.status}
                    </span>
                  </td>
                  <td className="py-3 px-4">
                    <div className="flex justify-center gap-2">
                      <Button 
                        size="sm" 
                        variant="outline" 
                        className="border-indigo-200 hover:bg-indigo-50 text-indigo-700"
                        onClick={() => abrirPerfil(prof)}
                      >
                        Acompanhar
                      </Button>
                      <Button 
                        size="sm"
                        variant="outline"
                        className="border-indigo-200 hover:bg-indigo-50 text-indigo-700"
                        onClick={() => setProfessorSelecionado(prof)}
                      >
                        Horários
                      </Button>
                      <Button 
                        size="sm" 
                        className="bg-indigo-600 hover:bg-indigo-700" 
                        onClick={() => toast.success(`Mensagem enviada para ${prof.nome}`)}
                      >
                        Mensagem
                      </Button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
      
      {/* Estatísticas de professores e eventos */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Pendências dos Professores */}
        <motion.div 
          custom={0} 
          variants={cardVariants} 
          initial="hidden" 
          animate="visible" 
          className="bg-white rounded-lg shadow-lg p-6 hover:shadow-xl transition-shadow"
        >
          <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
            <FileText className="h-5 w-5 text-indigo-600" /> Pendências dos Professores
          </h3>
          <ul className="space-y-4">
            <li className="flex items-start gap-3 p-3 bg-red-50 rounded-lg border border-red-100">
              <div className="bg-red-100 p-2 rounded-lg mt-0.5">
                <AlertTriangle className="h-5 w-5 text-red-600" />
              </div>
              <div>
                <p className="text-sm font-medium text-gray-800">Notas não lançadas (3)</p>
                <p className="text-xs text-gray-600 mt-1">Prazo final: 15/06/2024</p>
                <button 
                  className="text-xs text-indigo-600 font-medium mt-2 hover:text-indigo-800 transition-colors flex items-center gap-1"
                  onClick={() => handlePendenciaClick('Professores com notas pendentes')}
                >
                  Ver professores pendentes <span className="text-xs">→</span>
                </button>
              </div>
            </li>
            <li className="flex items-start gap-3 p-3 bg-amber-50 rounded-lg border border-amber-100">
              <div className="bg-amber-100 p-2 rounded-lg mt-0.5">
                <AlertTriangle className="h-5 w-5 text-amber-600" />
              </div>
              <div>
                <p className="text-sm font-medium text-gray-800">Relatórios a entregar (2)</p>
                <p className="text-xs text-gray-600 mt-1">Conselho de classe: 10/06/2024</p>
                <button 
                  className="text-xs text-indigo-600 font-medium mt-2 hover:text-indigo-800 transition-colors flex items-center gap-1"
                  onClick={() => handlePendenciaClick('Relatórios pendentes')}
                >
                  Ver relatórios pendentes <span className="text-xs">→</span>
                </button>
              </div>
            </li>
            <li className="flex items-start gap-3 p-3 bg-blue-50 rounded-lg border border-blue-100">
              <div className="bg-blue-100 p-2 rounded-lg mt-0.5">
                <FileText className="h-5 w-5 text-blue-600" />
              </div>
              <div>
                <p className="text-sm font-medium text-gray-800">Planos de aula (5)</p>
                <p className="text-xs text-gray-600 mt-1">Próximo semestre</p>
                <button 
                  className="text-xs text-indigo-600 font-medium mt-2 hover:text-indigo-800 transition-colors flex items-center gap-1"
                  onClick={() => handlePendenciaClick('Planejamento de aulas')}
                >
                  Revisar planejamento <span className="text-xs">→</span>
                </button>
              </div>
            </li>
          </ul>
          <div className="mt-6 pt-4 border-t border-gray-100">
            <Button 
              className="w-full bg-indigo-600 hover:bg-indigo-700"
              onClick={() => toast.success("Notificação enviada a todos os professores")}
            >
              Notificar Todos
            </Button>
          </div>
        </motion.div>
        
        {/* Próximos Eventos Acadêmicos */}
        <motion.div 
          custom={1} 
          variants={cardVariants} 
          initial="hidden" 
          animate="visible" 
          className="bg-white rounded-lg shadow-lg p-6 hover:shadow-xl transition-shadow"
        >
          <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
            <Calendar className="h-5 w-5 text-indigo-600" /> Próximos Eventos Acadêmicos
          </h3>
          <ul className="space-y-3">
            {mockEventosAcademicos.slice(0, 3).map((evento, idx) => (
              <li key={idx} className="bg-gradient-to-r from-indigo-50 to-indigo-100 rounded-lg p-4 hover:from-indigo-100 hover:to-indigo-200 transition-colors">
                <div className="flex justify-between items-center">
                  <div>
                    <div className="text-sm font-medium text-indigo-800">{evento.titulo}</div>
                    <div className="flex items-center gap-2 mt-1">
                      <Calendar className="h-3.5 w-3.5 text-indigo-500" />
                      <span className="text-xs text-indigo-600">
                        {evento.data.split('-')[2]}/{evento.data.split('-')[1]}/{evento.data.split('-')[0]}
                      </span>
                    </div>
                  </div>
                  <div className={`px-2 py-1 rounded-full text-xs font-medium ${
                    evento.tipo === 'Reunião' ? 'bg-blue-100 text-blue-700' : 
                    evento.tipo === 'Avaliação' ? 'bg-purple-100 text-purple-700' : 
                    evento.tipo === 'Acadêmico' ? 'bg-green-100 text-green-700' : 
                    'bg-amber-100 text-amber-700'
                  }`}>
                    {evento.tipo}
                  </div>
                </div>
              </li>
            ))}
          </ul>
          <div className="mt-6 pt-4 border-t border-gray-100">
            <Button 
              className="w-full bg-indigo-600 hover:bg-indigo-700"
              onClick={() => toast.success("Calendário acadêmico aberto")}
            >
              Ver Calendário Completo
            </Button>
          </div>
        </motion.div>
      </div>
    </motion.div>
    
    {/* Modal de Perfil do Professor */}
    {perfilAberto && (
      <PerfilProfessor 
        professor={perfilAberto} 
        onClose={() => setPerfilAberto(null)} 
      />
    )}
  );
} 